	*******************************************
	 XHisho アニメーション定義ファイル 解説
	   *******************************************

XHishoでは、背景画像としてアニメーション定義ファイルを指定することがで
きます。これにより、アニメーション画像を背景に指定することができます。
また、ラベルを用いることでメール着信通知及びスケジュール通知時のCGを変
えることができます。



1. フォーマット

  基本的には、単純なテキストファイルになります。

  1行目は、アニメーション定義ファイルであることを示す文字列 
  "XHisho Animation File" だけから成ります。

  2行目以降は、アニメーションコマンドからなります。アニメーションコマ
  ンドは
   
    1)実際にアニメーションに使う画像ファイル名と、表示時間(0.1秒単位)
    2)GOTO文(後述)
    3)MAIL及びSCHEDULEラベル(後述)

  のいずれかです。表示時間は省略もしくは -1 で無制限(つまり、表示した
  ままで次に進まない)になります。

  また、"#"で始まる行はコメントと見なされます。2行目以降で使用できます。




2. GOTO文

  GOTOを使った、制御文らしきものが書けます。書式は

  GOTO 行き先 回数

  です。行き先には、アニメーション定義コマンドの行数を指定します。回数
  は省略もしくは -1 で無制限になります。
  定義コマンドの行数は、1から数えます。最初の1行「XHisho Animation
  File」および"#"で始まるコメント行は数えません。




3. ラベル

  MAIL、SCHEDULEの2つのラベルが使えます。ラベルはそれだけで1行使います。
  このラベルをつけると、メール到着時(スケジュール通知時)に、このラベル
  の次の行からアニメーションが実行されます。

  ラベルの直前などにGOTOを入れるのを忘れないでください。そうしないと、
  ラベルを無視してアニメーションが先に進んでしまいます。

  なお、通知ウインドをPopdownすると、それまでの通常アニメーションの続
  きに復帰します。



4. 実例

  例えば、「1.bmpを0.5秒、2.bmpを0.3秒、3.bmpを1秒、4.bmpを0.1秒」とい
  う順にアニメーションさせたい場合、定義ファイルは以下のようになります。

XHisho Animation File
1.bmp 5
2.bmp 3
3.bmp 10
4.bmp 1


  2つ目のフィールドの秒数を省略すると、-1(表示したまま)だと見なされます。
  最後まで処理すると、自動的に最初に戻ります。この場合は「GOTO 1」は省略
  できます。


  先ほどと同じアニメーションで、「2.bmpを0.3秒、3.bmpを1秒」というシー
  ケンスを3回繰り返し、そのあとで4.bmpを表示したい場合は以下のようにな
  ります。

XHisho Animation File
1.bmp 5
2.bmp 3
3.bmp 10
GOTO 2 3
4.bmp 1


  次に、ラベルを使う場合です。「通常は1.bmp、メールが来たら2.bmp、スケ
  ジュール通知時は3.bmpを1秒のあと4.bmpを2秒というアニメーションを表示」
  の場合は次のようになります。

XHisho Animation File
1.bmp
MAIL
2.bmp
SCHEDULE
3.bmp 10
4.bmp 20
GOTO 5

  この時、例えば最後の行の「GOTO 5」を忘れるとスケジュール通知時に
  3.bmp → 4.bmp と表示したあと、続けて1.bmpを表示してしまいますので気
  をつけてください。

  sampleディレクトリに、"xbiff.anim"というサンプルを用意しました。これ
  を使うと、xbiffと同様のアニメーションを行います。





5. ファイル名の検索

  3行目以降のファイル名は、以下のルールで検索されます。

  (1)絶対パスとしてファイルを探す。無ければ次へ。
  (2)カレントディレクトリを探す。無ければ次へ。
  (3)アニメーション定義ファイルと同じディレクトリを探す。無ければエラー。





6. コンパイラ

  アニメーション定義ファイルは行指向(行数を数える必要がある)ので、人間
  が手で書くのはやや面倒です。

  そこで、簡単な制御構文とラベルが使える簡易言語XADL(XHisho Animation
  Definition Language)と、そのコンパイラを用意しました。これを使うこと
  で、複雑なアニメーションも比較的簡単に記述できるようになります。

  例を挙げてみましょう。以下のようなアニメーションを考えます。表示時間
  は全て0.5秒です。


  通常時: ((1.bmp → 2.bmp) x 2回 → 3.bmp) x 2回 → 4.bmp → 戻る
  メール: mail.bmp → 1.bmp → 戻る
  スケジュール: schedule.bmp


  これを実現するアニメーションファイルを手で書くと、以下のようになりま
  す。

XHisho Animation File
1.bmp 5
2.bmp 5
GOTO 1 2
3.bmp 5
GOTO 1 2
GOTO 1
MAIL
mail.bmp 5
1.bmp 5
GOTO 8
SCHEDULE
schedule.bmp -1


   これはかなり面倒です。しかし、XADLを使うと、以下のように記述できま
   す。

loop(2){
    loop(2){
        display(1.bmp,5);
        display(2.bmp,5);
    }
    display(3.bmp,5);
}
display(4.bmp,5);

mail{
    display(mail.bmp,5);
    display(1.bmp,5);
}

schedule 
    display(schedule.bmp);


   ずいぶん分かりやすくなったと思いませんか？


   xadlの詳しい言語使用については xadl/README.xadl をご覧下さい。コン
   パイラは、

   %cd SOMEWHERE/xhisho140/xadl
   %make

   で、xadlというコマンドが作られます。

   使い方は

   %xadl input_file > output_file

   です。



7. 制限事項


  (1)当然ながら、アニメーションに使うファイルが多いほどメモリを食いま
     す。あまり多いと起動できないことがあります。
  (2)1枚の画像を表示するのに時間がかかる場合(Ex. 大きな画像、複雑な
     shape、計算機が遅い)、定義ファイルの記述通りにならないことがあり
     ます。
  (3)ウインドサイズは常にそのとき表示するCGに合わせようとします。この
     時、サイズの変更は左上の隅を基準に行われます。そのため、大きさの
     異なるCGをアニメーションに使うと、ウインドが伸び縮みするように見
     えてしまいますので注意してください。
